from collections import deque

import requests
from parsel import Selector

from imdb.models import Request, Item


class RequestsEngine(object):
    """
    Main request scheduler

    Generate and dispatche requests generated by parsers.
    Hooks can be setted do responses and Items. 
    """

    def __init__(self, startRequests):
        self.queue = deque(startRequests)
        self.visited = set()
        self.item_hooks = []
        self.response_hooks = [self._set_selector_hook]

    def _set_selector_hook(self, response):
        selector = Selector(text=response.text)
        setattr(response, 'selector', selector)
        setattr(response, 'xpath', selector.xpath)
        return response

    def add_item_hook(self, hook):
        """Registers a hook to items"""
        self.item_hooks.append(hook)

    def add_response_hook(self, hook):
        """Registers a hook to responses"""
        self.response_hooks.append(hook)

    def run(self):
        while self.queue:
            request = self.queue.pop()
            self.visited.add(request)

            response = requests.get(request.url)
            for hook in self.response_hooks:
                response = hook(response)

            for crop in request.callback(response):
                if isinstance(crop, Item):
                    for hook in self.item_hooks:
                        crop = hook(crop)

                elif isinstance(crop, Request):
                    if crop not in self.visited:
                        self.queue.append(crop)
